package basic;

import java.util.Arrays;

public class Combination {
    //조합과 순열 차이점
    //순열=순서가 있는 조합
    //조합은 순서가 중요하지 않기 떄문에 선택을 하고 구성물이 중복이면 빼버린다.
    //순열은 순서가 중요하기 떄문에 내용물이 중복이어도 순서가 다르면 다른 것이다.

    public static void main(String[] args) {

        basic();
        System.out.println("-".repeat(20));
        basic2();
    }

    //백트래킹도 근데 재귀아냐..?
    //둘의 차이가 뭔데..?

    //기본 조합(중복X)
    public static void basic(){
        int[] arrs = new int[]{1, 2, 3, 4, 5};
        int[] anws = new int[3];

        for (int i = 0; i < arrs.length; i++) {
            anws[0] = arrs[i];
            for (int j = i+1; j < arrs.length; j++) {
                anws[1] = arrs[j];
                for (int k = j+1; k < arrs.length; k++) {
                    anws[2] = arrs[k];
                    System.out.println(Arrays.toString(anws));
                }
            }
        }
    }
/*[1, 2, 3]
[1, 2, 4]
[1, 2, 5]
[1, 3, 4]
[1, 3, 5]
[1, 4, 5]
[2, 3, 4]
[2, 3, 5]
[2, 4, 5]
[3, 4, 5]*/
    //중복 조합
    public static void basic2(){
        int[] arrs = new int[]{1, 2, 3, 4, 5};

        int[] anws = new int[3];

        for (int i = 0; i < arrs.length; i++) {
            System.out.println();
            anws[0] = arrs[i];
            for (int j = 0; j < arrs.length; j++) {
                System.out.println();
                anws[1] = arrs[j];
                for (int k = 0; k < arrs.length; k++) {
                    anws[2] = arrs[k];
                    System.out.print(Arrays.toString(anws)+" ");
                }
            }
        }

    }
    /*[1, 1, 1] [1, 1, 2] [1, 1, 3] [1, 1, 4] [1, 1, 5]
[1, 2, 1] [1, 2, 2] [1, 2, 3] [1, 2, 4] [1, 2, 5]
[1, 3, 1] [1, 3, 2] [1, 3, 3] [1, 3, 4] [1, 3, 5]
[1, 4, 1] [1, 4, 2] [1, 4, 3] [1, 4, 4] [1, 4, 5]
[1, 5, 1] [1, 5, 2] [1, 5, 3] [1, 5, 4] [1, 5, 5]

[2, 1, 1] [2, 1, 2] [2, 1, 3] [2, 1, 4] [2, 1, 5]
[2, 2, 1] [2, 2, 2] [2, 2, 3] [2, 2, 4] [2, 2, 5]
[2, 3, 1] [2, 3, 2] [2, 3, 3] [2, 3, 4] [2, 3, 5]
[2, 4, 1] [2, 4, 2] [2, 4, 3] [2, 4, 4] [2, 4, 5]
[2, 5, 1] [2, 5, 2] [2, 5, 3] [2, 5, 4] [2, 5, 5]

[3, 1, 1] [3, 1, 2] [3, 1, 3] [3, 1, 4] [3, 1, 5]
[3, 2, 1] [3, 2, 2] [3, 2, 3] [3, 2, 4] [3, 2, 5]
[3, 3, 1] [3, 3, 2] [3, 3, 3] [3, 3, 4] [3, 3, 5]
[3, 4, 1] [3, 4, 2] [3, 4, 3] [3, 4, 4] [3, 4, 5]
[3, 5, 1] [3, 5, 2] [3, 5, 3] [3, 5, 4] [3, 5, 5]

[4, 1, 1] [4, 1, 2] [4, 1, 3] [4, 1, 4] [4, 1, 5]
[4, 2, 1] [4, 2, 2] [4, 2, 3] [4, 2, 4] [4, 2, 5]
[4, 3, 1] [4, 3, 2] [4, 3, 3] [4, 3, 4] [4, 3, 5]
[4, 4, 1] [4, 4, 2] [4, 4, 3] [4, 4, 4] [4, 4, 5]
[4, 5, 1] [4, 5, 2] [4, 5, 3] [4, 5, 4] [4, 5, 5]

[5, 1, 1] [5, 1, 2] [5, 1, 3] [5, 1, 4] [5, 1, 5]
[5, 2, 1] [5, 2, 2] [5, 2, 3] [5, 2, 4] [5, 2, 5]
[5, 3, 1] [5, 3, 2] [5, 3, 3] [5, 3, 4] [5, 3, 5]
[5, 4, 1] [5, 4, 2] [5, 4, 3] [5, 4, 4] [5, 4, 5]
[5, 5, 1] [5, 5, 2] [5, 5, 3] [5, 5, 4] [5, 5, 5] */


   // https://bcp0109.tistory.com/15

    //백트래킹
    public static void solution1(int[] ans,boolean[] visitid, int start, int n, int r) {

    }

    //재귀
    public static void solution2() {

    }

}
